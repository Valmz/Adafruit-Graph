// You can use any (4 or) 5 pins\
// Attack  sclk to pin 4, mosi to pin 5, cs to pin 6, ds to pin 7, rst to pin 8
#define sclk 4
#define mosi 5
#define cs   6
#define dc   7
#define rst  8  // you can also connect this to the Arduino reset

#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library
#include <SPI.h> 

//Screen is 128 by 160 pixels

Adafruit_ST7735 tft = Adafruit_ST7735(cs, dc, mosi, sclk, rst);
int rate = 50; //In pixels per second; total width of the screen is 160 pixels, the slower  the rate, the more accurate the reading.
double maxVolt = 5;
double voltI = 1;
int baseLine = 0;
int rotation = 3;//Rotation values can be 0,1,2,3, each one is a rotation of 90 degrees, 0 and 2 are landscape; 1, and 3 are portrait
int backColor = ST7735_BLACK; //Colors can be ST7735_BLACK, ST7735_WHITE, ST7735_BLUE, ST7735_RED, ST7735_GREEN,unsig
int lineColor = ST7735_WHITE;//               ST7735_CYAN, ST7735_MAGENTA, ST7735_YELLOW,
double threshold = 1; //this is measured in voltage


int k=0,recent[8];

void setup(void) {
int i = 0;
   
  Serial.begin(9600); // Open the serial connection, 9600 baud
  
  tft.initR(INITR_REDTAB);   // initialize a ST7735R chip, red tab 
  tft.setRotation(rotation);
  tft.fillScreen(backColor); //Start with the screen completely black

  tft.setCursor(120, 5);
  tft.setTextColor(ST7735_WHITE, ST7735_BLACK);
  tft.setTextSize(1);
  
 } 

int getReadingAverage (unsigned long timeInit) {
  int sensorPin=A0,i=0;
  int sensorReading;
  long sum=0;
   
  for (i=0;(millis()-timeInit)<(1000/rate);i++) {//keep taking averages in the time inverval alloted per pixel by the rate variable, i keeps track of how many in case it is too fast, and to average
    sensorReading = analogRead(sensorPin);
    sum += sensorReading;
  }
  sum /= i;
  
  return  sum;
}
 
void loop() {  
  int sensorReading=0,pixelHeight[160], i=0,j=1,h, change = 0;
  long time=0;
  double average=0;
  unsigned long pulseRate=0, beatTime=0;

     
    for(i=0;i<160;i++){
      tft.drawLine(i,127-(baseLine+pixelHeight[i]),i-1,127-(baseLine+pixelHeight[i-1]),backColor);//erasing the old lines by tracing over them in the background color
    }

tft.drawLine(160,103,150,103, lineColor);
tft.drawLine(160,78,150,78, lineColor);
tft.drawLine(160,53,150,53, lineColor);
tft.drawLine(160,28,150,28, lineColor);
tft.drawLine(160,3,150,3, lineColor);

      time = millis();
      sensorReading = getReadingAverage(time);   
      pixelHeight[0] = (double(sensorReading)*double(640))/(double(1023)*double(maxVolt));// sensorReading is multiplied by 5/1023 to get voltage. Then voltage divided the maximum voltage (i.e. 1V/6V) is multiplied by total number of pixels in the height

    for(i=1;i<160;i++){
      time = millis();
      sensorReading = getReadingAverage(time);
//sensorReading=abs(sensorReading);      
      pixelHeight[i] = (double(sensorReading)*double(640))/(double(1023)*double(maxVolt));// sensorReading is multiplied by 5/1023 to get voltage. Then voltage divided the maximum voltage (i.e. 1V/6V) is multiplied by total number of pixels in the height
      
      if (baseLine + pixelHeight[i] > tft.height()) //a voltage that is greater than the maximum allowed by user will cap off
	  pixelHeight[i] = tft.height()-baseLine;
      tft.drawLine(i,127-(baseLine+pixelHeight[i]),i-1,127-(baseLine+pixelHeight[i-1]),lineColor);
      
      if (i > 3) change = (2*pixelHeight[i-1])-pixelHeight[i] - pixelHeight[i-2];
      
      if ((change > 25) && (change < 256) && ((millis() - beatTime)>250)) {
      pulseRate = millis();
      if (beatTime !=0) {
       
           tft.setCursor(120, 5);
           tft.fillRect(132, 5,5, 7, ST7735_BLACK);
           tft.setCursor(120, 5);
           tft.setTextColor(ST7735_WHITE, ST7735_BLACK);           
       	   tft.print((60000/(pulseRate-beatTime))); 
      }     
        beatTime = pulseRate;
      }

    }
 

} 
