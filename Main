// You can use any (4 or) 5 pins\
// Attack  sclk to pin 4, mosi to pin 5, cs to pin 6, ds to pin 7, rst to pin 8
#define sclk 4
#define mosi 5
#define cs   6
#define dc   7
#define rst  8  // you can also connect this to the Arduino reset

#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library
#include <SPI.h> //I dont know what this is but I need it to compile correctly

//Screen is 128 by 180 pixels

Adafruit_ST7735 tft = Adafruit_ST7735(cs, dc, mosi, sclk, rst);

int pixelHeight[180];
int rate = 90; //In pixels per second; total width of the screen is 180 pixels, the slower  the rate, the more accurate the reading.
double maxVolt = 5;

void setup(void) { 
  // LED on Pin 13 for digital on/off while writing
  pinMode(A0, INPUT);

  // Open the serial connection, 9600 baud
  Serial.begin(9600);
  
  // If your TFT's plastic wrap has a Red Tab, use the following:
  tft.initR(INITR_REDTAB);   // initialize a ST7735R chip, red tab
  // If your TFT's plastic wrap has a Green Tab, use the following:
  //tft.initR(INITR_GREENTAB); // initialize a ST7735R chip, green tab
  
  
  tft.fillScreen(ST7735_BLACK); //Start with the screen completely black
  //testdrawtext("Initializing...", 0x07E0); //error: 'class Adafruit_ST7735 has no member names 'testdrawtest', 'testdrawtext' was not declared in this scope
  //tft.drawPixel(tft.width()/2, tft.height()/2, ST7735_GREEN); //this is just for reference
} 

int getReading (unsigned long timeInit) {
  int i;
  int sensorReading;
  int sensorPin = A0;
   
  for (i=0;(millis()-timeInit)<(1000/rate);i++) //keep taking averages in the time inverval alloted per pixel by the rate variable, i keeps track of how many in case it is too fast, and to average
    sensorReading += analogRead(sensorPin);
  sensorReading /= i;  
  
  return sensorReading;
  
}

void displayReading() {
  int sensorReading;
  unsigned long time;
  int i;
  int counter;
  int start = 0;
  
  
  
  //while (Serial.available()>0){} //Eventually we need to make a way to actually turn off the loop
  tft.fillScreen(ST7735_BLACK); 
  
  for(;true;){
  i=1;
  counter = start%180;
  time = millis();
  sensorReading = getReading(time);
  pixelHeight[counter] = (sensorReading*5/1023)*tft.height()/maxVolt; // 5/1023 is the conversion factor
  if (pixelHeight[counter] > maxVolt) //a voltage that is greater than the maximum allowed by user will cap off
  pixelHeight[counter] = tft.height();
  
 
  for (counter; i<180; counter--){ //go through every pixel on the x-axis
    if ((start - i +1) >0) {//check to make sure its a real pixel to save time
    tft.drawPixel(abs(counter+1), pixelHeight[counter], ST7735_BLACK); //erase pixel at this point
    tft.drawPixel(abs(counter+2), pixelHeight[counter], ST7735_WHITE); //draw pixel one pixel to the right

    }
  }
  start += 1;
  

  }
  
  
}


void loop() {  
 
  int startbyte;        // start byte, init measurement  
  
  // listen until we get a '255' on the serial line as a 'trigger'
  if (Serial.available() > 0) {
    startbyte = Serial.read(); 
     
    if (startbyte == 255)  // if it is the trigger, prep & send a reading
      displayReading();
  }       
}
